{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Claude Code Auto-Yes","text":"<p>Automatically respond to Claude Code prompts in tmux sessions. No more manual clicking - stay focused on your work.</p>"},{"location":"#the-problem","title":"The Problem","text":"<p>Claude Code frequently asks \"Do you want to continue?\" and similar confirmation prompts. These interruptions break your flow, and you sometimes miss prompts when stepping away from your screen.</p>"},{"location":"#the-solution","title":"The Solution","text":"<p>Claude Code Auto-Yes watches your tmux sessions and automatically responds to these prompts. When Claude asks \"Do you want to continue?\", the tool sends \"yes\" for you. When it asks \"Proceed?\", you get automatic confirmation.</p> <p>You stay in control: - Enable auto-yes for sessions where you want full automation - Leave it disabled when you need to review each step carefully - Toggle specific Claude instances on or off through a simple interface</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>The fastest way to get running:</p> <pre><code># Install the tool\nuv tool install git+https://github.com/safurrier/claude-code-autoyes.git\n\n# Check what Claude sessions are running\nclaude-code-autoyes status\n\n# Enable auto-yes for all of them\nclaude-code-autoyes enable-all\n\n# Start the background daemon\nclaude-code-autoyes daemon start\n</code></pre> <p>Now when Claude prompts you, the tool automatically responds. To see everything in action, launch the interactive interface:</p> <pre><code>claude-code-autoyes\n</code></pre>"},{"location":"#what-you-get","title":"What You Get","text":"<p>Visual Control: An interactive terminal interface showing all your Claude instances with real-time status updates.</p> <p>Smart Detection: Automatically finds Claude Code processes running in tmux panes without any configuration.</p> <p>Selective Automation: Enable auto-yes for some sessions while keeping manual control over others.</p> <p>Background Monitoring: A daemon that watches enabled sessions and responds to prompts even when you're not looking.</p> <p>Multiple Themes: Choose from 11 beautiful color schemes including Dracula, Nord, and Gruvbox.</p> <p>Quick Navigation: Jump mode lets you navigate the entire interface with single keystrokes.</p>"},{"location":"#how-it-works","title":"How It Works","text":"<p>The tool scans your tmux sessions looking for processes with \"claude\" in the name. For each Claude instance it finds, it can monitor that tmux pane for specific prompt patterns:</p> <ul> <li>\"Do you want to\"</li> <li>\"Would you like to\"</li> <li>\"Proceed?\"</li> <li>\"\u276f 1. Yes\"</li> </ul> <p>When one of these patterns appears in an enabled session, the daemon automatically sends an \"Enter\" keypress to that tmux pane. It's that straightforward.</p>"},{"location":"#beyond-the-basics","title":"Beyond the Basics","text":"<p>Once you're comfortable with the basics, you can:</p> <ul> <li>Fine-tune control by enabling only specific Claude instances instead of all of them</li> <li>Use keyboard shortcuts to instantly toggle sessions (press 1-9 for quick access)</li> <li>Monitor daemon logs if something isn't working as expected</li> <li>Try different themes to match your terminal setup</li> </ul> <p>The tool includes comprehensive commands for every scenario, from quick status checks to detailed daemon management.</p>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Quick reference: Run <code>claude-code-autoyes --help</code> to see all available commands</li> <li>Detailed guides: Check the Getting Started page for step-by-step instructions</li> <li>Development info: See Development if you want to contribute or modify the tool</li> </ul>"},{"location":"#installation-options","title":"Installation Options","text":"<p>Global tool (recommended): <pre><code>uv tool install git+https://github.com/safurrier/claude-code-autoyes.git\n</code></pre></p> <p>Run without installing: <pre><code>git clone https://github.com/safurrier/claude-code-autoyes.git\ncd claude-code-autoyes\nuv run claude_code_autoyes.py\n</code></pre></p> <p>Development setup: <pre><code>git clone https://github.com/safurrier/claude-code-autoyes.git\ncd claude-code-autoyes\nmake setup\n</code></pre></p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>tmux - This tool only works with Claude Code running in tmux sessions. Install tmux if you don't have it.</li> <li>Python 3.9+</li> <li>Claude Code running in tmux panes</li> </ul> <p>Important: Claude Code must be running inside tmux sessions for this tool to detect and monitor it.</p> <p>That's it. No complex setup, no configuration files, no database backends.</p>"},{"location":"#license","title":"License","text":"<p>MIT License - use it however you want.</p>"},{"location":"development/","title":"Local Development Guide","text":"<p>Quick reference for testing PRs and developing claude-code-autoyes locally.</p>"},{"location":"development/#quick-start","title":"Quick Start","text":"<pre><code># Show all available commands\nmake help\n\n# Test a specific PR\nmake dev-test-pr PR=4\n\n# Test daemon functionality  \nmake dev-daemon-test\n\n# Watch daemon logs\nmake dev-logs\n\n# Clean up when done\nmake dev-uninstall\n</code></pre>"},{"location":"development/#commands-overview","title":"Commands Overview","text":""},{"location":"development/#development-testing-commands","title":"\ud83d\udd27 Development &amp; Testing Commands","text":"Command Purpose <code>make dev-install</code> Install current branch as test tool <code>make dev-uninstall</code> Remove test tool installation <code>make dev-test-pr PR=4</code> Test a specific PR <code>make dev-run</code> Run current code without installing <code>make dev-status</code> Show current development status <code>make dev-daemon-test</code> Test daemon with simulated prompts <code>make dev-logs</code> Tail daemon logs <code>make dev-daemon-stop</code> Stop daemon and clean up"},{"location":"development/#performance-analysis-commands","title":"\ud83d\udcca Performance Analysis Commands","text":"Command Purpose <code>uv run python -m claude_code_autoyes debug --help</code> Show all debug commands <code>uv run python -m claude_code_autoyes debug startup-time</code> Measure TUI startup performance <code>uv run python -m claude_code_autoyes debug navigation-test</code> Test navigation responsiveness <code>uv run python -m claude_code_autoyes debug profile</code> Profile with py-spy (requires setup) <code>uv run python -m claude_code_autoyes tui --debug</code> Launch TUI with debug mode"},{"location":"development/#testing-workflow","title":"Testing Workflow","text":""},{"location":"development/#1-test-a-pull-request","title":"1. Test a Pull Request","text":"<pre><code># Fetch and test PR #4\nmake dev-test-pr PR=4\n\n# Now you have 'claude-code-autoyes-test' command available\nclaude-code-autoyes-test --help\nclaude-code-autoyes-test status\n</code></pre>"},{"location":"development/#2-test-daemon-functionality","title":"2. Test Daemon Functionality","text":"<pre><code># Set up test environment and start daemon\nmake dev-daemon-test\n\n# In another terminal, watch logs\nmake dev-logs\n\n# Manually test by attaching to tmux session\ntmux attach -t claude-test\n./scripts/simulate-claude-prompt.sh\n</code></pre>"},{"location":"development/#3-clean-up","title":"3. Clean Up","text":"<pre><code># Stop everything and clean up\nmake dev-daemon-stop\nmake dev-uninstall\n\n# Return to main branch\ngit checkout main\n</code></pre>"},{"location":"development/#tool-installation-details","title":"Tool Installation Details","text":"<p>The development commands use UV tool installation with a unique name: - Tool name: <code>claude-code-autoyes-test</code> - Installation: <code>uv tool install --from . --name claude-code-autoyes-test claude-code-autoyes</code> - Isolation: Won't conflict with your main installation</p>"},{"location":"development/#performance-analysis","title":"Performance Analysis","text":""},{"location":"development/#setup-performance-tools","title":"Setup Performance Tools","text":"<pre><code># Install optional performance dependencies\nuv sync --extra performance\n\n# Verify py-spy installation\nuv run py-spy --version\n</code></pre>"},{"location":"development/#performance-testing-workflow","title":"Performance Testing Workflow","text":"<pre><code># Profile running TUI with py-spy\nuv run python -m claude_code_autoyes debug profile -d 10 -o /tmp/profile.svg\n\n# Profiling requires TUI to be running first\nuv run python -m claude_code_autoyes tui &amp;\nTUI_PID=$!\nuv run python -m claude_code_autoyes debug profile -d 10\nkill $TUI_PID\n\n# Manual py-spy usage (requires sudo on macOS)\nsudo uv run py-spy record -p $TUI_PID -d 10 -o /tmp/profile.svg\n\n# Run performance test suite\nuv run -m pytest tests/performance/ -v\n</code></pre>"},{"location":"development/#daemon-testing","title":"Daemon Testing","text":"<p>The daemon testing workflow:</p> <ol> <li>Creates test tmux session: <code>claude-test</code></li> <li>Installs test tool: <code>claude-code-autoyes-test</code></li> <li>Enables all sessions: Configures daemon to monitor all tmux sessions</li> <li>Starts daemon: Runs in background monitoring for prompts</li> <li>Provides test script: <code>scripts/simulate-claude-prompt.sh</code></li> <li>Shows logs: Tail <code>/tmp/claude-autoyes.log</code></li> </ol>"},{"location":"development/#manual-testing","title":"Manual Testing","text":"<p>For manual testing without make commands:</p> <pre><code># Install test version\nuv tool install --from . --name my-test-tool claude-code-autoyes\n\n# Test commands\nmy-test-tool status\nmy-test-tool daemon start\nmy-test-tool daemon status\n\n# Clean up\nuv tool uninstall my-test-tool\n</code></pre>"},{"location":"development/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/#tool-installation-issues","title":"Tool Installation Issues","text":"<pre><code># If installation fails, try forcing reinstall\nuv tool install --from . --force-reinstall --name claude-code-autoyes-test claude-code-autoyes\n</code></pre>"},{"location":"development/#daemon-issues","title":"Daemon Issues","text":"<pre><code># Check if daemon is running\nclaude-code-autoyes-test daemon status\n\n# Check logs\ncat /tmp/claude-autoyes.log\n\n# Kill any stuck processes\npkill -f claude-autoyes\n</code></pre>"},{"location":"development/#tmux-issues","title":"Tmux Issues","text":"<pre><code># List tmux sessions\ntmux list-sessions\n\n# Kill specific session\ntmux kill-session -t claude-test\n\n# Kill all tmux sessions (careful!)\ntmux kill-server\n</code></pre>"},{"location":"development/#project-structure","title":"Project Structure","text":"<pre><code>claude-code-autoyes/\n\u251c\u2500\u2500 claude_code_autoyes/     # Main package\n\u251c\u2500\u2500 tests/                   # Test suite\n\u251c\u2500\u2500 scripts/                 # Development scripts (auto-generated)\n\u251c\u2500\u2500 docs/                    # Documentation\n\u251c\u2500\u2500 Makefile                 # Development commands\n\u2514\u2500\u2500 claude_code_autoyes.py   # UV script entry\n</code></pre>"},{"location":"development/#contributing","title":"Contributing","text":"<ol> <li>Create your feature branch</li> <li>Make changes</li> <li>Test with <code>make dev-install</code></li> <li>Run quality checks: <code>make check</code></li> <li>Create pull request</li> <li>Test PR with <code>make dev-test-pr PR=&lt;number&gt;</code></li> </ol>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will get you up and running with claude-code-autoyes in just a few minutes.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Required: - tmux - This tool only works with Claude Code running in tmux sessions. Install tmux if you don't have it. - Python 3.9+ - Claude Code running in tmux panes</p> <p>Important: Claude Code must be running inside tmux sessions for this tool to detect and monitor it.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install using UV (recommended): <pre><code>uv tool install git+https://github.com/safurrier/claude-code-autoyes.git\n</code></pre></p> <p>Or run without installing: <pre><code>git clone https://github.com/safurrier/claude-code-autoyes.git\ncd claude-code-autoyes\nuv run claude_code_autoyes.py\n</code></pre></p>"},{"location":"getting-started/#typical-workflow","title":"Typical Workflow","text":"<p>Here's the standard way to use the tool:</p> <ol> <li>Start Claude Code in tmux: Launch your Claude Code session within a tmux session</li> <li>Check sessions: Use <code>claude-code-autoyes status</code> to see detected Claude sessions</li> <li>Enable auto-yes: Use <code>claude-code-autoyes enable-all</code> or enable specific sessions via TUI</li> <li>Start TUI: Run <code>claude-code-autoyes</code> - the daemon starts automatically!</li> <li>Work normally: The tool will automatically respond to Claude prompts</li> </ol> <p>[Screenshot placeholder: Terminal showing typical workflow commands and output]</p>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#command-line-interface","title":"Command Line Interface","text":"<p>Check the status of tmux sessions: <pre><code>claude-code-autoyes status\n</code></pre></p> <p>Enable auto-yes for all Claude Code sessions: <pre><code>claude-code-autoyes enable-all\n</code></pre></p> <p>Launch the interactive TUI: <pre><code>claude-code-autoyes tui\n\n# Or with debug mode for performance monitoring\nclaude-code-autoyes tui --debug\n</code></pre></p> <p>[Screenshot placeholder: TUI interface showing Claude instances and controls]</p>"},{"location":"getting-started/#daemon-control","title":"Daemon Control","text":"<p>The daemon runs automatically with the TUI - no manual start/stop needed!</p> <p>For advanced users who want manual control: <pre><code>claude-code-autoyes daemon start    # Start manually\nclaude-code-autoyes daemon status   # Check status  \nclaude-code-autoyes daemon stop     # Stop manually\n</code></pre></p>"},{"location":"getting-started/#performance-analysis","title":"Performance Analysis","text":"<p>Profile TUI performance with py-spy: <pre><code>claude-code-autoyes debug profile          # Profile with py-spy (requires setup)\nclaude-code-autoyes debug --help           # See all debug options\n</code></pre></p> <p>Install performance analysis tools: <pre><code>uv sync --extra performance\n</code></pre></p>"},{"location":"getting-started/#interactive-tui","title":"Interactive TUI","text":"<p>The Terminal User Interface provides a visual way to manage sessions:</p> <pre><code>claude-code-autoyes tui\n</code></pre> <p>[Demo placeholder: Animated GIF showing TUI navigation and theme switching]</p> <p>Features: - View all tmux sessions and panes - See which sessions have Claude Code running - Toggle auto-yes on/off per session - Real-time status updates - Multiple themes: 11 beautiful themes including Dracula, Nord, Gruvbox, and more - Jump navigation: Quick keyboard navigation to any UI element - Enhanced controls: Improved focus management and responsiveness</p>"},{"location":"getting-started/#tui-keyboard-shortcuts","title":"TUI Keyboard Shortcuts","text":"<ul> <li><code>\u2191\u2193</code>: Navigate instances</li> <li><code>Enter/Space</code>: Toggle selected instance</li> <li><code>1-9</code>: Quick toggle by number</li> <li><code>r</code>: Refresh</li> <li><code>t</code>: Cycle themes</li> <li><code>v</code>: Jump Mode (quick navigation)</li> <li><code>Ctrl+Q</code>: Quit</li> </ul>"},{"location":"getting-started/#how-it-works","title":"How It Works","text":""},{"location":"getting-started/#detection-process","title":"Detection Process","text":"<ol> <li>Session Discovery: Scans tmux sessions for running processes</li> <li>Claude Identification: Looks for processes with \"claude\" in the name (case-insensitive)</li> <li>Prompt Monitoring: Watches enabled sessions for specific prompt patterns:</li> <li>\"Do you want to\"</li> <li>\"Would you like to\"</li> <li>\"Proceed?\"</li> <li>\"\u276f 1. Yes\"</li> </ol>"},{"location":"getting-started/#response-mechanism","title":"Response Mechanism","text":"<ul> <li>When a prompt is detected, the daemon automatically sends an \"Enter\" key to the session</li> <li>Configurable delay between responses to avoid overwhelming the system</li> <li>Session-specific enable/disable controls for fine-grained management</li> </ul>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/#common-issues","title":"Common Issues","text":"<p>No sessions detected: - Ensure Claude Code is running in a tmux session - Check that the process name contains \"claude\" (case-insensitive) - Verify tmux is accessible from the command line</p> <p>Daemon not responding: - Check daemon status: <code>claude-code-autoyes daemon status</code> - Review daemon logs: <code>/tmp/claude-autoyes.log</code> - Restart the daemon: <code>claude-code-autoyes daemon restart</code></p> <p>Auto-yes not working: - Verify the session is enabled: <code>claude-code-autoyes status</code> - Check that prompts match the expected patterns - Ensure no conflicting input is being sent to the session</p>"},{"location":"getting-started/#documentation","title":"Documentation","text":""},{"location":"getting-started/#viewing-documentation","title":"Viewing Documentation","text":"<p>Serve documentation locally: <pre><code>make docs-serve\n</code></pre></p> <p>The documentation will be available at http://localhost:8000</p>"},{"location":"getting-started/#building-documentation","title":"Building Documentation","text":"<p>Build static documentation: <pre><code>make docs-build\n</code></pre></p> <p>The built documentation will be in the <code>site/</code> directory.</p>"},{"location":"getting-started/#development","title":"Development","text":"<p>Want to contribute or modify the tool?</p>"},{"location":"getting-started/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/safurrier/claude-code-autoyes.git\ncd claude-code-autoyes\n</code></pre></p> </li> <li> <p>Set up the development environment:    <pre><code>make setup\n</code></pre></p> </li> <li> <p>Install development tools:    <pre><code>make dev-install\n</code></pre></p> </li> <li> <p>Run the tests to verify everything works:    <pre><code>make test\n</code></pre></p> </li> </ol>"},{"location":"getting-started/#development-workflow","title":"Development Workflow","text":"<ol> <li>Make your changes to the code</li> <li>Add or update tests as needed</li> <li>Run quality checks:    <pre><code>make check\n</code></pre></li> <li>Update documentation if needed</li> <li>Commit your changes</li> <li>Create a pull request</li> </ol>"},{"location":"getting-started/#available-commands","title":"Available Commands","text":"<p>Run <code>make</code> to see all available commands:</p> <ul> <li><code>make setup</code> - Set up development environment</li> <li><code>make test</code> - Run tests with coverage</li> <li><code>make lint</code> - Run linting</li> <li><code>make format</code> - Format code</li> <li><code>make mypy</code> - Run type checking</li> <li><code>make check</code> - Run all quality checks</li> <li><code>make docs-serve</code> - Serve documentation locally</li> <li><code>make docs-build</code> - Build documentation</li> </ul>"},{"location":"getting-started/#testing","title":"Testing","text":"<p>Run the test suite: <pre><code>make test\n</code></pre></p> <p>Run specific tests: <pre><code>uv run -m pytest tests/test_specific.py::test_function_name\n</code></pre></p> <p>Run tests with coverage: <pre><code>make test-coverage\n</code></pre></p>"},{"location":"reference/api/","title":"API Reference","text":"<p>This page contains the auto-generated API documentation for claude-code-autoyes.</p>"},{"location":"reference/api/#claude_code_autoyes","title":"claude_code_autoyes","text":"<p>Claude Code Auto-Yes - TUI for managing auto-yes across Claude instances.</p> <p>A tool that automatically responds \"yes\" to prompts in Claude Code sessions running in tmux. Provides both a TUI and CLI interface for managing which sessions have auto-yes enabled.</p> <p>The tool consists of: - A detector that finds Claude instances in tmux panes - A configuration manager for enabled sessions - A daemon that monitors and responds to prompts - CLI commands for control and status - A TUI for interactive management</p>"}]}